==16904== Memcheck, a memory error detector
==16904== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==16904== Using Valgrind-3.16.1-36d6727e1d-20200622X and LibVEX; rerun with -h for copyright info
==16904== Command: ./a.out
==16904== Parent PID: 2428
==16904== 
--16904-- 
--16904-- Valgrind options:
--16904--    --tool=memcheck
--16904--    --leak-check=full
--16904--    --show-leak-kinds=all
--16904--    --leak-resolution=high
--16904--    --show-reachable=yes
--16904--    --trace-children=yes
--16904--    --verbose
--16904--    --log-file=valgrind.log
--16904-- Contents of /proc/version:
--16904--   Linux version 5.10.0-13-amd64 (debian-kernel@lists.debian.org) (gcc-10 (Debian 10.2.1-6) 10.2.1 20210110, GNU ld (GNU Binutils for Debian) 2.35.2) #1 SMP Debian 5.10.106-1 (2022-03-17)
--16904-- 
--16904-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-ssse3-avx-avx2-bmi-f16c-rdrand
--16904-- Page sizes: currently 4096, max supported 4096
--16904-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--16904-- Reading syms from /home/rmechety/mypiscine/test_dir/a.out
--16904-- Reading syms from /usr/lib/x86_64-linux-gnu/ld-2.31.so
--16904--   Considering /usr/lib/debug/.build-id/32/438eb3b034da54caf58c7a65446639f7cfe274.debug ..
--16904--   .. build-id is valid
--16904-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--16904--   Considering /usr/lib/debug/.build-id/54/299c4aec0e5e5f3d7b8135341351d0e1dbfc64.debug ..
--16904--   .. build-id is valid
--16904--    object doesn't have a dynamic symbol table
--16904-- Scheduler: using generic scheduler lock implementation.
--16904-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==16904== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-16904-by-rmechety-on-???
==16904== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-16904-by-rmechety-on-???
==16904== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-16904-by-rmechety-on-???
==16904== 
==16904== TO CONTROL THIS PROCESS USING vgdb (which you probably
==16904== don't want to do, unless you know exactly what you're doing,
==16904== or are doing some strange experiment):
==16904==   /usr/bin/vgdb --pid=16904 ...command...
==16904== 
==16904== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==16904==   /path/to/gdb ./a.out
==16904== and then give GDB the following command
==16904==   target remote | /usr/bin/vgdb --pid=16904
==16904== --pid is optional if only one valgrind process is running
==16904== 
--16904-- REDIR: 0x401f970 (ld-linux-x86-64.so.2:strlen) redirected to 0x580ca5f2 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--16904-- REDIR: 0x401f750 (ld-linux-x86-64.so.2:index) redirected to 0x580ca60c (vgPlain_amd64_linux_REDIR_FOR_index)
--16904-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--16904--   Considering /usr/lib/debug/.build-id/f2/7641e081d3c37b410d7f31da4e2bf21040f356.debug ..
--16904--   .. build-id is valid
--16904-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--16904--   Considering /usr/lib/debug/.build-id/25/7cdcdf80e04f91ca9e3b185ee3b52995e89946.debug ..
--16904--   .. build-id is valid
==16904== WARNING: new redirection conflicts with existing -- ignoring it
--16904--     old: 0x0401f970 (strlen              ) R-> (0000.0) 0x580ca5f2 vgPlain_amd64_linux_REDIR_FOR_strlen
--16904--     new: 0x0401f970 (strlen              ) R-> (2007.0) 0x0483bda0 strlen
--16904-- REDIR: 0x401c190 (ld-linux-x86-64.so.2:strcmp) redirected to 0x483cc90 (strcmp)
--16904-- REDIR: 0x401feb0 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x4840740 (mempcpy)
--16904-- Reading syms from /usr/lib/x86_64-linux-gnu/libc-2.31.so
--16904--   Considering /usr/lib/debug/.build-id/2e/5abcee94f3bcbed7bba094f341070a2585a2ba.debug ..
--16904--   .. build-id is valid
--16904-- REDIR: 0x48ebea0 (libc.so.6:memmove) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48eb250 (libc.so.6:strncpy) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48ec1c0 (libc.so.6:strcasecmp) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48eab70 (libc.so.6:strcat) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48eb2b0 (libc.so.6:rindex) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48ed550 (libc.so.6:rawmemchr) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x4905710 (libc.so.6:wmemchr) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x49052b0 (libc.so.6:wcscmp) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48ec000 (libc.so.6:mempcpy) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48ebe30 (libc.so.6:bcmp) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48eb1f0 (libc.so.6:strncmp) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48eac20 (libc.so.6:strcmp) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48ebf60 (libc.so.6:memset) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x4905270 (libc.so.6:wcschr) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48eb150 (libc.so.6:strnlen) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48eacf0 (libc.so.6:strcspn) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48ec210 (libc.so.6:strncasecmp) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48eac90 (libc.so.6:strcpy) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48ec360 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x4906910 (libc.so.6:wcsnlen) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x49052f0 (libc.so.6:wcscpy) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48eb2f0 (libc.so.6:strpbrk) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48eabd0 (libc.so.6:index) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48eb110 (libc.so.6:strlen) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48f18b0 (libc.so.6:memrchr) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48ec260 (libc.so.6:strcasecmp_l) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48ebdf0 (libc.so.6:memchr) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x4905390 (libc.so.6:wcslen) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48eb590 (libc.so.6:strspn) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48ec160 (libc.so.6:stpncpy) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48ec100 (libc.so.6:stpcpy) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48ed590 (libc.so.6:strchrnul) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x48ec2b0 (libc.so.6:strncasecmp_l) redirected to 0x482e1b0 (_vgnU_ifunc_wrapper)
--16904-- REDIR: 0x49bc990 (libc.so.6:__strrchr_avx2) redirected to 0x483b7b0 (rindex)
==16905== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-16905-by-rmechety-on-???
==16905== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-16905-by-rmechety-on-???
==16905== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-16905-by-rmechety-on-???
==16905== 
==16905== TO CONTROL THIS PROCESS USING vgdb (which you probably
==16905== don't want to do, unless you know exactly what you're doing,
==16905== or are doing some strange experiment):
==16905==   /usr/bin/vgdb --pid=16905 ...command...
==16905== 
==16905== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==16905==   /path/to/gdb ./a.out
==16905== and then give GDB the following command
==16905==   target remote | /usr/bin/vgdb --pid=16905
==16905== --pid is optional if only one valgrind process is running
==16905== 
==16906== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-16906-by-rmechety-on-???
==16906== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-16906-by-rmechety-on-???
==16906== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-16906-by-rmechety-on-???
==16906== 
==16906== TO CONTROL THIS PROCESS USING vgdb (which you probably
==16906== don't want to do, unless you know exactly what you're doing,
==16906== or are doing some strange experiment):
==16906==   /usr/bin/vgdb --pid=16906 ...command...
==16906== 
==16906== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==16906==   /path/to/gdb ./a.out
==16906== and then give GDB the following command
==16906==   target remote | /usr/bin/vgdb --pid=16906
==16906== --pid is optional if only one valgrind process is running
==16906== 
--16906-- REDIR: 0x49bcb60 (libc.so.6:__strlen_avx2) redirected to 0x483bc80 (strlen)
--16906-- REDIR: 0x48e70f0 (libc.so.6:malloc) redirected to 0x4838710 (malloc)
--16905-- REDIR: 0x48e7720 (libc.so.6:free) redirected to 0x4839940 (free)
--16904-- REDIR: 0x48e7720 (libc.so.6:free) redirected to 0x4839940 (free)
==16905== 
==16905== HEAP SUMMARY:
==16905==     in use at exit: 0 bytes in 0 blocks
==16905==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==16905== 
==16905== All heap blocks were freed -- no leaks are possible
==16905== 
==16905== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==16904== 
==16904== HEAP SUMMARY:
==16904==     in use at exit: 0 bytes in 0 blocks
==16904==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==16904== 
==16904== All heap blocks were freed -- no leaks are possible
==16904== 
==16904== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
